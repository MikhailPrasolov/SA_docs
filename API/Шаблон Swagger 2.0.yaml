swagger: "2.0"
info:
  version: "1.0.0"
  title: "Example API"
  description: |
    Документация для REST API сервиса.
    ### Основные возможности:
    - Управление пользователями
    - Работа с заказами
  contact:
    name: "API Support"
    email: "support@example.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

host: "api.example.com"
basePath: "/v1"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

paths:
  /users:
    get:
      tags:
        - "Users"
      summary: "Получить список пользователей"
      description: "Возвращает paginated список всех пользователей."
      parameters:
        - name: "limit"
          in: "query"
          description: "Количество записей на странице"
          required: false
          type: "integer"
          default: 10
        - name: "offset"
          in: "query"
          description: "Смещение (пагинация)"
          required: false
          type: "integer"
          default: 0
      responses:
        200:
          description: "Успешный ответ"
          schema:
            $ref: "#/definitions/UsersListResponse"
        500:
          description: "Ошибка сервера"

    post:
      tags:
        - "Users"
      summary: "Создать пользователя"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UserCreateRequest"
      responses:
        201:
          description: "Пользователь создан"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "Невалидные данные"

  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Получить пользователя по ID"
      parameters:
        - name: "id"
          in: "query"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "Успешный ответ"
          schema:
            $ref: "#/definitions/UserResponse"
        404:
          description: "Пользователь не найден"

definitions:
  User:
    type: "object"
    required:
      - "id"
      - "name"
    properties:
      id:
        type: "string"
        format: "uuid"
        example: "550e8400-e29b-41d4-a716-446655440000"
      name:
        type: "string"
        example: "John Doe"
      email:
        type: "string"
        format: "email"
        example: "user@example.com"
      role:
        type: "string"
        enum:
          - "admin"
          - "user"
          - "guest"
        default: "user"

  UserCreateRequest:
    type: "object"
    required:
      - "name"
      - "email"
    properties:
      name:
        type: "string"
        example: "New User"
      email:
        type: "string"
        format: "email"
        example: "new@example.com"
      role:
        $ref: "#/definitions/User/properties/role"

  UserResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: true
      data:
        $ref: "#/definitions/User"

  UsersListResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: true
      data:
        type: "array"
        items:
          $ref: "#/definitions/User"
      meta:
        type: "object"
        properties:
          total:
            type: "integer"
            example: 100
          limit:
            type: "integer"
            example: 10
          offset:
            type: "integer"
            example: 0